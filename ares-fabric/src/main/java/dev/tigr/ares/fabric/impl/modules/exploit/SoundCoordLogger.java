package dev.tigr.ares.fabric.impl.modules.exploit;

import dev.tigr.ares.core.feature.module.Category;
import dev.tigr.ares.core.feature.module.Module;
import dev.tigr.ares.core.util.render.TextColor;
import dev.tigr.ares.fabric.event.client.PacketEvent;
import dev.tigr.simpleevents.listener.EventHandler;
import dev.tigr.simpleevents.listener.EventListener;
import net.minecraft.network.packet.s2c.play.PlaySoundS2CPacket;
import net.minecraft.sound.SoundEvent;
import net.minecraft.sound.SoundEvents;
import net.minecraft.util.math.Vec3d;

/**
 * @author Tigermouthbear
 */
@Module.Info(name = "SoundPosLogger", description = "Global sound events such as withers spawning will have their coords shown to you", category = Category.EXPLOIT)
public class SoundCoordLogger extends Module {
    @EventHandler
    public EventListener<PacketEvent.Receive> packetReceiveEvent = new EventListener<>(event -> {
        if(event.getPacket() instanceof PlaySoundS2CPacket) {
            PlaySoundS2CPacket packet = (PlaySoundS2CPacket) event.getPacket();

            SoundEvent sound = packet.getSound();
            if(SoundEvents.ENTITY_WITHER_SPAWN.equals(sound))
                UTILS.printMessage(TextColor.BLUE + "Wither Spawned at " + vectorToString(new Vec3d(packet.getX(), packet.getY(), packet.getZ())));
            else if(SoundEvents.ENTITY_ENDER_DRAGON_DEATH.equals(sound))
                UTILS.printMessage(TextColor.BLUE + "Ender Dragon Defeated at " + vectorToString(new Vec3d(packet.getX(), packet.getY(), packet.getZ())));
            else if(SoundEvents.BLOCK_END_PORTAL_FRAME_FILL.equals(sound))
                UTILS.printMessage(TextColor.BLUE + "End Portal Activated at " + vectorToString(new Vec3d(packet.getX(), packet.getY(), packet.getZ())));
        }
    });

    private String vectorToString(Vec3d vector, boolean... includeY) {
        boolean reallyIncludeY = includeY.length <= 0 || includeY[0];
        StringBuilder builder = new StringBuilder();
        builder.append('(');
        builder.append((int) Math.floor(vector.x));
        builder.append(", ");
        if(reallyIncludeY) {
            builder.append((int) Math.floor(vector.y));
            builder.append(", ");
        }
        builder.append((int) Math.floor(vector.z));
        builder.append(")");
        return builder.toString();
    }
}
