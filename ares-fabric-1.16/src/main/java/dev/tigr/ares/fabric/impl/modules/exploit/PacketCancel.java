package dev.tigr.ares.fabric.impl.modules.exploit;

import dev.tigr.ares.core.feature.module.Category;
import dev.tigr.ares.core.feature.module.Module;
import dev.tigr.ares.core.setting.Setting;
import dev.tigr.ares.core.setting.settings.BooleanSetting;
import dev.tigr.ares.fabric.event.client.PacketEvent;
import dev.tigr.simpleevents.listener.EventHandler;
import dev.tigr.simpleevents.listener.EventListener;
import net.minecraft.network.packet.c2s.play.*;

/**
 * @author Tigermouthbear
 * ported to Fabric by Hoosiers 11/27/20
 */
@Module.Info(name = "PacketCancel", description = "Cancels certain packets", category = Category.EXPLOIT)
public class PacketCancel extends Module {
    private final Setting<Boolean> vehicleMove = register(new BooleanSetting("VehicleMoveC2SPacket", true));
    private final Setting<Boolean> entityAction = register(new BooleanSetting("PlayerActionC2SPacket", true));
    private final Setting<Boolean> entityInteract = register(new BooleanSetting("PlayerInteractEntityC2SPacket", true));
    private final Setting<Boolean> playerInput = register(new BooleanSetting("PlayerInputC2SPacket", true));
    private final Setting<Boolean> playerMove = register(new BooleanSetting("PlayerMoveC2SPacket", true));
    private final Setting<Boolean> updatePlayerAbilities = register(new BooleanSetting("UpdatePlayerAbilitiesC2SPacket", true));
    private final Setting<Boolean> handSwing = register(new BooleanSetting("HandSwingC2SPacket", true));
    private final Setting<Boolean> playerInteractItem = register(new BooleanSetting("PlayerInteractItemC2SPacket", true));
    private final Setting<Boolean> playerInteractBlock = register(new BooleanSetting("PlayerInteractBlockC2SPacket", true));

    @EventHandler
    public EventListener<PacketEvent.Sent> packetSentEvent = new EventListener<>(event -> {
        if(event.getPacket() instanceof VehicleMoveC2SPacket && vehicleMove.getValue()) event.setCancelled(true);
        else if(event.getPacket() instanceof PlayerActionC2SPacket && entityAction.getValue()) event.setCancelled(true);
        else if(event.getPacket() instanceof PlayerInteractEntityC2SPacket && entityInteract.getValue()) event.setCancelled(true);
        else if(event.getPacket() instanceof PlayerInputC2SPacket && playerInput.getValue()) event.setCancelled(true);
        else if(event.getPacket() instanceof PlayerMoveC2SPacket && playerMove.getValue()) event.setCancelled(true);
        else if(event.getPacket() instanceof UpdatePlayerAbilitiesC2SPacket && updatePlayerAbilities.getValue())
            event.setCancelled(true);
        else if(event.getPacket() instanceof HandSwingC2SPacket && handSwing.getValue())
            event.setCancelled(true);
        else if(event.getPacket() instanceof PlayerInteractItemC2SPacket && playerInteractItem.getValue())
            event.setCancelled(true);
        else if(event.getPacket() instanceof PlayerInteractBlockC2SPacket && playerInteractBlock.getValue())
            event.setCancelled(true);
    });
}
