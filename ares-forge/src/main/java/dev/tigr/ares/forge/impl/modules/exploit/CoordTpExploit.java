package dev.tigr.ares.forge.impl.modules.exploit;

import dev.tigr.ares.core.feature.module.Category;
import dev.tigr.ares.core.feature.module.Module;
import dev.tigr.ares.core.setting.Setting;
import dev.tigr.ares.core.setting.settings.EnumSetting;
import dev.tigr.ares.core.util.render.TextColor;
import dev.tigr.ares.forge.utils.WorldUtils;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.math.Vec3d;

import java.util.HashMap;

/**
 * @authors cookiedragon234 Tigermouthbear
 */
@Module.Info(name = "CoordTpExploit", description = "Will show you the new coords of any players within your render distance that tp", category = Category.EXPLOIT)
public class CoordTpExploit extends Module {
    // Map of each known client and their last known position
    private final HashMap<Entity, Vec3d> knownPlayers = new HashMap<>();
    private final HashMap<String, Vec3d> tpdPlayers = new HashMap<>();
    private final Setting<Publicity> publicity = register(new EnumSetting<>("Mode", Publicity.PRIVATE));
    // Number of ticks since we last calculated if any players had teleported
    private int numTicks = 0;
    private int numForgetTicks = 0;

    @Override
    public void onTick() {
        if(numTicks >= 50) {
            numTicks = 0;
            for(Entity entity: MC.world.loadedEntityList) {
                if(entity instanceof EntityPlayer && !entity.getName().equals(MC.player.getName())) {

                    Vec3d playerPos = new Vec3d((int) entity.posX, (int) entity.posY, (int) entity.posZ);
                    if(knownPlayers.containsKey(entity)) {
                        if(Math.abs(knownPlayers.get(entity).distanceTo(playerPos)) > 50 && Math.abs(MC.player.getPositionVector().distanceTo(playerPos)) > 100 && !(tpdPlayers.containsKey(entity.getName()) && tpdPlayers.get(entity.getName()) == playerPos)) {
                            // This client teleported, alert the user
                            if(publicity.getValue() == Publicity.PUBLIC) {
                                MC.player.sendChatMessage("Player " + entity.getName() + " teleported to " + WorldUtils.vectorToString(playerPos));
                            } else {
                                UTILS.printMessage(TextColor.GOLD + "Player " + TextColor.BLUE + entity.getName() + TextColor.GOLD + " teleported to " + WorldUtils.vectorToString(playerPos));
                            }

                            knownPlayers.remove(entity);
                            tpdPlayers.put(entity.getName(), playerPos);
                        }

                        // Update the stored location of the client
                        knownPlayers.put(entity, playerPos);
                    } else {
                        knownPlayers.put(entity, playerPos);
                    }
                }
            }
        }
        if(numForgetTicks >= 9000000) {
            tpdPlayers.clear();
        }
        numTicks++;
        numForgetTicks++;
    }

    enum Publicity {
        PRIVATE,
        PUBLIC
    }
}
