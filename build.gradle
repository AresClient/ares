plugins {
    id("org.jetbrains.kotlin.jvm") version "$kotlinVersion" apply false
}

allprojects {
    apply plugin: "java"
    apply plugin: "org.jetbrains.kotlin.jvm"
}

group = project.mavenGroup
version = project.modVersion
archivesBaseName = project.modid

subprojects {
    repositories {
        mavenCentral()
        maven {
            name = "MeshMC"
            url = "https://maven.meshmc.net"
        }
        maven {
            name = "Fabric"
            url = "https://maven.fabricmc.net"
        }
    }

    dependencies {
        implementation "net.meshmc:mesh-loader:$loaderVersion"

        implementation "dev.tigr:simpleevents:1.3"

        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:$coroutinesVersion"
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:$serializationVersion"
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:$serializationVersion"
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-cbor-jvm:$serializationVersion"
    }
}

configurations {
    embeddedLibs
    embeddedJars
}

repositories {
    maven {
        name = "MeshMC"
        url = "https://maven.meshmc.net"
    }
}

dependencies {
    embeddedLibs "dev.tigr:simpleevents:1.3"

    embeddedLibs(project(":core")) {
        transitive = false
    }

    subprojects.forEach {
        if(it.name.matches("v[0-9]+_[0-9]+_([0-9]+|x)")) embeddedJars(it) {
            transitive = false
        }
    }
}

jar {
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.embeddedLibs.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from(configurations.embeddedJars)
}
